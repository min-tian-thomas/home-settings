function clone()
{
    local github_url=$1
    if [ "$github_url" == "" ]; then
      echo "Error: run clone with github_url"
      exit 1
    fi
    local meta=""
    local project=""
    
    github_url="${github_url#https://github.com/}"
    
    if [ "$github_url" == $1 ]; then
       github_url="${github_url#git@github.com:}"
    fi
    
    if [ "$github_url" == $1 ]; then
      echo "Error: $1 is not prefixed with https://github.com/ or git@github.com:"
      exit 1
    fi    

    IFS='/' read -ra url_parts <<< "${github_url}"

    echo "Got $url_parts with $github_url"
    # Extract the meta and proj parts
    if [ "${#url_parts[@]}" -ge 2 ]; then
      meta="${url_parts[0]}"
      proj="${url_parts[1]%.*}" # Remove the ".git" suffix
    fi
  
    # Clone the project into $WORKSPACE/fsf/$meta/$proj
    if [ -n "$meta" ] && [ -n "$proj" ]; then
        WORKSPACE="/home/thomas/projects/workspace"
        clone_url="https://github.com/$meta/$proj.git"
        git clone "$clone_url" "$WORKSPACE/fsf/$meta/$proj"
        echo "Cloned $clone_url into $WORKSPACE/fsf/$meta/$proj"
    else
        echo "Failed to extract meta and proj from the GitHub URL."
    fi
}

function venv()
{
  local NAME=$1
  if [ "$NAME" == "" ]; then
    NAME=".venv"
  fi

  if [ "$VIRTUAL_ENV" != "" ]; then
    deactivate
  fi 
  
  if [ -d "$NAME" ]; then
    source $NAME/bin/activate
  fi
}

# add_tmux_window(name, cwd, commands)
# e.g. add_tmux_window 1 "polaris" "projects/workspace/polaris" "ls"
function add_tmux_window() {
  local window_name=$1
  local cwd=$2

  tmux new-window -t $session_name:$idx -n $window_name "mkdir -p $cwd; cd $cwd; bash -i"
  for ((cmd_idx=3; cmd_idx<=$#; cmd_idx++))
  do
    #pick up args by idx
    cmd=${!cmd_idx}
    tmux send-keys -t ${session_name}:${idx} "$cmd"
    tmux send-keys -t ${session_name}:${idx} ENTER
  done
  
  idx=$((idx+1))
}

function setup_workspace() {
  session_name=workspace
  idx=1
  
  # start new tmux session
  tmux new -s $session_name -d
    
  add_tmux_window "jupyter-lab" "/home/thomas/projects/workspace/jupyter-workspace" "jupyter lab" 
  add_tmux_window "logs" "/tmp/logs" "ls -l"
  add_tmux_window "cores" "/tmp/cores" "ls -l"
  add_tmux_window "shms" "/dev/shm" "ls -l"
  add_tmux_window "fsf" "~/projects/workspace/fsf" "ls -l"
  add_tmux_window "polaris" "~/projects/workspace/polaris"
 

  tmux select-window -t $session_name:0
  tmux -2 attach-session -t $session_name
}

function test_much() {
   for (( idx=1; idx < 5000; idx++ ))
   do
      echo "Running [$@] for [$idx] times"
      $@
      if [[ $? != 0 ]]; then break; fi
  done
}

function set_proxy() {
	export windows_host=`cat /etc/resolv.conf|grep nameserver|awk '{print $2}'`
	#export ALL_PROXY=socks5://$windows_host:1080

	export ALL_PROXY=http://$windows_host:1080
	export HTTP_PROXY=$ALL_PROXY
	export http_proxy=$ALL_PROXY
	export HTTPS_PROXY=$ALL_PROXY
	export https_proxy=$ALL_PROXY
}

function unset_proxy() {
	unset ALL_PROXY
	unset HTTP_PROXY
	unset http_proxy
	unset HTTPS_PROXY
	unset https_proxy
}

function ntmux() {
  	read -p "Input your session name (Enter to list existing ones): " SESSION_NAME
	if [ "$SESSION_NAME" == "" ]; then
		echo "List all current sessions belongs to you on this host:"
		tmux ls
		read -p "Input your session name: " SESSION_NAME
		tmux attach -t $SESSION_NAME
		if [ $? -eq 0 ]; then
                	return
		fi
        fi
	
	tmux new -s $SESSION_NAME
}

# Useful unarchiver!
function extract () {
        if [ -f $1 ] ; then
                case $1 in
                        *.tar.bz2)        tar xjf $1               ;;
                        *.tar.gz)         tar xzf $1               ;;
                        *.bz2)            bunzip2 $1               ;;
                        *.rar)            rar x $1                 ;;
                        *.gz)             gunzip $1                ;;
                        *.tar)            tar xf $1                ;;
                        *.tbz2)           tar xjf $1               ;;
                        *.tgz)            tar xzf $1               ;;
                        *.zip)            unzip $1                 ;;
                        *.Z)              uncompress $1            ;;
                        *)                echo "'$1' cannot be extracted via extract()" ;;
                esac
        else
                echo "'$1' is not a valid file"
        fi
}

function revert(){
    git reset --hard $1
}

# Simplify apt-get search and install
function show ()
{
    apt-cache search $1
}

function giveme ()
{
    sudo apt-get install "$@"
}

function compiledb()
{
  echo "Generate cmake files in build dir and create compile_commands.json"
  [ ! -d "build" ] && mkdir build
  cd build 
  cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 $@ .. 
  ln -sf build/compile_commands.json ../compile_commands.json 
  cd ..
}

# used for less binlog
function bless()
{
  tail -c0 -F $1 | bread
}

get_PS1(){
    # set variable identifying the chroot you work in (used in the prompt below)
    if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
        debian_chroot=$(cat /etc/debian_chroot)
    fi

    # set a fancy prompt (non-color, unless we know we "want" color)
    case "$TERM" in
        xterm-color|*-256color) color_prompt=yes;;
    esac

    # uncomment for a colored prompt, if the terminal has the capability; turned
    # off by default to not distract the user: the focus in a terminal window
    # should be on the output of commands, not on the prompt
    local force_color_prompt=yes

    if [ -n "$force_color_prompt" ]; then
        if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
        else
        color_prompt=
        fi
    fi

    if [ "$color_prompt" = yes ]; then
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[01;36m\]$(__git_ps1)\[\033[00m\]\n\$ '
    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w$(__git_ps1)\n\$ '
    fi
    unset color_prompt force_color_prompt

    # If this is an xterm set the title to user@host:dir
    case "$TERM" in
    xterm*|rxvt*)
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h:\w\a\]$PS1"
        ;;
    *)
        ;;
    esac

    # disable activate virtual env name set
    export VIRTUAL_ENV_DISABLE_PROMPT=1
    if [[ -n "$VIRTUAL_ENV" ]]; then
        local virt_env=`printf "($(echo $VIRTUAL_ENV | awk -F "/" '{print $NF}'))"`;
        PS1="${virt_env} $PS1";
    fi
}

